package game;

import com.orbischallenge.ctz.Constants;
import com.orbischallenge.ctz.objects.EnemyUnit;
import com.orbischallenge.ctz.objects.FriendlyUnit;
import com.orbischallenge.ctz.objects.World;
import com.orbischallenge.ctz.objects.enums.Direction;
import com.orbischallenge.ctz.objects.enums.MoveResult;
import com.orbischallenge.ctz.objects.enums.PickupResult;
import com.orbischallenge.ctz.objects.enums.ShotResult;
import com.orbischallenge.game.engine.Point;

import java.util.*;

import action.*;

@SuppressWarnings("unused")
public class Friendly extends AnyUnit {
	public static Friendly[] friendlyUnits = {
		new Friendly(),
		new Friendly(),
		new Friendly(),
		new Friendly()
	};

	public static void setFriendlyUnits(FriendlyUnit[] units) {
		for(int i = 0; i < 4; i++)
			friendlyUnits[i].friendlyUnit = units[i];
	}
	public static FriendlyUnit getUnit(int i) {
		return friendlyUnits[i].friendlyUnit;
	}
	
	public FriendlyUnit friendlyUnit;
	public void setFriendlyUnits(FriendlyUnit unit) {
		this.friendlyUnit = unit;
		SetupActionInformation(this, Enemy.enemyUnits, Enemy.enemyUnits);
		
		for(int i = 0; i < 4; i++) {
			// If the friendly isn't dead evaluate action
			if(friendlyUnit.getHealth() != 0)
				EvaluateAllActions();
		}
	}
	
	// Checks if the action is valid
	public void CheckAllActions() {
		actions.get("MoveNorth").isValid = (friendlyUnit.checkMove(Direction.NORTH) == MoveResult.MOVE_VALID);
		actions.get("MoveSouth").isValid = (friendlyUnit.checkMove(Direction.SOUTH) == MoveResult.MOVE_VALID);
		actions.get("MoveEast").isValid = (friendlyUnit.checkMove(Direction.EAST) == MoveResult.MOVE_VALID);
		actions.get("MoveWest").isValid = (friendlyUnit.checkMove(Direction.WEST) == MoveResult.MOVE_VALID);
		actions.get("MoveNorthEast").isValid = (friendlyUnit.checkMove(Direction.NORTH_EAST) == MoveResult.MOVE_VALID);
		actions.get("MoveNorthWest").isValid = (friendlyUnit.checkMove(Direction.NORTH_WEST) == MoveResult.MOVE_VALID);
		actions.get("MoveSouthEast").isValid = (friendlyUnit.checkMove(Direction.SOUTH_EAST) == MoveResult.MOVE_VALID);
		actions.get("MoveSouthWest").isValid = (friendlyUnit.checkMove(Direction.SOUTH_WEST) == MoveResult.MOVE_VALID);
		
		for(int i = 0; i < 4; i++) {
			EnemyUnit enemy = Enemy.getUnit(i);
			if(friendlyUnit.checkShotAgainstEnemy(enemy) == ShotResult.HIT_ENEMY) {
				setActionForDirections(actions, Direction.fromTo(friendlyUnit.getPosition(), enemy.getPosition()));
			}
		}
		
		actions.get("PickupObject").isValid = (friendlyUnit.checkPickupResult() == PickupResult.PICK_UP_VALID);
	}
	
}
