package action;

import java.util.*;

import com.orbischallenge.ctz.objects.FriendlyUnit; 
import com.orbischallenge.ctz.objects.EnemyUnit; 
import com.orbischallenge.ctz.objects.enums.Direction;

// This class is default static
public class ActionList extends HashMap<String, Action> {

	private static final long serialVersionUID = 1L;

	public ActionList() {
		this.put("MoveNorth", new MovementAction("MoveNorth"));
		this.put("MoveSouth", new MovementAction("MoveSouth"));
		this.put("MoveEast", new MovementAction("MoveEast"));
		this.put("MoveWest", new MovementAction("MoveWest"));
		this.put("MoveNorthEast", new MovementAction("MoveNorthEast"));
		this.put("MoveNorthWest", new MovementAction("MoveNorthWest"));
		this.put("MoveSouthEast", new MovementAction("MoveSouthEast"));
		this.put("MoveSouthWest", new MovementAction("MoveSouthWest"));
		
		this.put("ShootNorth", new ShootingAction("ShootNorth"));
		this.put("ShootSouth", new ShootingAction("ShootSouth"));
		this.put("ShootEast", new ShootingAction("ShootEast"));
		this.put("ShootWest", new ShootingAction("ShootWest"));
		this.put("ShootNorthEast", new ShootingAction("ShootNorthEast"));
		this.put("ShootNorthWest", new ShootingAction("ShootNorthWest"));
		this.put("ShootSouthEast", new ShootingAction("ShootSouthEast"));
		this.put("ShootSouthWest", new ShootingAction("ShootSouthWest"));
		
		this.put("PickupObject", new OtherAction("PickupObject"));
		this.put("ActivateShield", new OtherAction("ActivateShield"))
	}
	
	// This function only works for friendly units
    public static void ExecuteAction(Action a) {
    	switch (a.name) {
    	case "MoveNorth":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "MoveSouth":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.SOUTH);
    	case "MoveEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.EAST);
    	case "MoveWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.WEST);
    	case "MoveNorthEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH_EAST);
    	case "MoveNorthWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH_WEST);
    	case "MoveSouthEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.SOUTH_EAST);
    	case "MoveSouthWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.SOUTH_WEST);
    	case "ShootNorth":
    		((FriendlyUnit) a.currentUnit.unit).shootAt())
    	case "ShootSouth":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ShootEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ShootWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ShootNorthEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ShootNorthWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ShootSouthEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ShootSouthWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "PickupObject":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "ActivateShield":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	break;    	
    	}
    }
    
    public static EnemyUnit GetEnemyInDirection
    
}
