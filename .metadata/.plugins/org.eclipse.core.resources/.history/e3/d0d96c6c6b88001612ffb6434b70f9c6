package action;

import com.orbischallenge.ctz.objects.EnemyUnit;
import com.orbischallenge.ctz.objects.FriendlyUnit;
import com.orbischallenge.ctz.objects.enums.Direction;
import com.orbischallenge.ctz.objects.enums.ShotResult;

import game.*;

public abstract class Action {
	public String name;
	public float score = 0.0f;
	public boolean isValid = false;
	
	public AnyUnit currentUnit;
	public AnyUnit[] enemyUnits;
	public AnyUnit[] friendlyUnits;
	
	public Action(String name_) {
		name = name_;
	}
	
	public abstract void EvaluateScore();
	
	public static void ExecuteAction(Action a) {
    	switch (a.name) {
    	case "MoveNorth":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH);
    	case "MoveSouth":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.SOUTH);
    	case "MoveEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.EAST);
    	case "MoveWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.WEST);
    	case "MoveNorthEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH_EAST);
    	case "MoveNorthWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.NORTH_WEST);
    	case "MoveSouthEast":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.SOUTH_EAST);
    	case "MoveSouthWest":
    		((FriendlyUnit) a.currentUnit.unit).move(Direction.SOUTH_WEST);
    	case "ShootNorth":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.NORTH, a));
    	case "ShootSouth":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.SOUTH, a));
    	case "ShootEast":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.EAST, a));
    	case "ShootWest":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.WEST, a));
    	case "ShootNorthEast":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.NORTH_EAST, a));
    	case "ShootNorthWest":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.NORTH_WEST, a));
    	case "ShootSouthEast":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.SOUTH_EAST, a));
    	case "ShootSouthWest":
    		((FriendlyUnit) a.currentUnit.unit).shootAt(GetEnemyInDirection(Direction.SOUTH_WEST, a));
    	case "PickupObject":
    		((FriendlyUnit) a.currentUnit.unit).pickupItemAtPosition();
    	case "ActivateShield":
    		((FriendlyUnit) a.currentUnit.unit).activateShield();
    	break;    	
    	}
    }
	
	// This function only works for friendly units
    public static EnemyUnit GetEnemyInDirection(Direction dir, Action a) {
    	try {
	    	for(int i = 0; i < 4; i++) {
	    		if(Enemy.getUnit(i).getHealth() == 0) continue;
	    		ShotResult result = ((FriendlyUnit) a.currentUnit.unit).shootAt(Enemy.getUnit(i));
	    		if(result != ShotResult.CAN_HIT_ENEMY) continue;
	    		if(Direction.fromTo(a.currentUnit.unit.getPosition(), Enemy.getUnit(i).getPosition()) != dir) continue;
	    		return ((EnemyUnit)Enemy.getUnit(i));
	    	}
			throw new Exception("Cannot Get Enemy in Direction");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
    }
}


